// Code generated by mockery v1.0.0. DO NOT EDIT.

package cache

import mock "github.com/stretchr/testify/mock"
import types "github.com/goodwithtech/deckoder/types"

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type CacheClearReturns struct {
	Err error
}

type CacheClearExpectation struct {
	Returns CacheClearReturns
}

func (_m *MockCache) ApplyClearExpectation(e CacheClearExpectation) {
	var args []interface{}
	_m.On("Clear", args...).Return(e.Returns.Err)
}

func (_m *MockCache) ApplyClearExpectations(expectations []CacheClearExpectation) {
	for _, e := range expectations {
		_m.ApplyClearExpectation(e)
	}
}

// Clear provides a mock function with given fields:
func (_m *MockCache) Clear() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type CacheGetImageArgs struct {
	ImageID         string
	ImageIDAnything bool
}

type CacheGetImageReturns struct {
	ImageConfig types.ImageInfo
	Err         error
}

type CacheGetImageExpectation struct {
	Args    CacheGetImageArgs
	Returns CacheGetImageReturns
}

func (_m *MockCache) ApplyGetImageExpectation(e CacheGetImageExpectation) {
	var args []interface{}
	if e.Args.ImageIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ImageID)
	}
	_m.On("GetImage", args...).Return(e.Returns.ImageConfig, e.Returns.Err)
}

func (_m *MockCache) ApplyGetImageExpectations(expectations []CacheGetImageExpectation) {
	for _, e := range expectations {
		_m.ApplyGetImageExpectation(e)
	}
}

// GetImage provides a mock function with given fields: imageID
func (_m *MockCache) GetImage(imageID string) (types.ImageInfo, error) {
	ret := _m.Called(imageID)

	var r0 types.ImageInfo
	if rf, ok := ret.Get(0).(func(string) types.ImageInfo); ok {
		r0 = rf(imageID)
	} else {
		r0 = ret.Get(0).(types.ImageInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CacheGetLayerArgs struct {
	LayerID         string
	LayerIDAnything bool
}

type CacheGetLayerReturns struct {
	LayerInfo types.LayerInfo
}

type CacheGetLayerExpectation struct {
	Args    CacheGetLayerArgs
	Returns CacheGetLayerReturns
}

func (_m *MockCache) ApplyGetLayerExpectation(e CacheGetLayerExpectation) {
	var args []interface{}
	if e.Args.LayerIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.LayerID)
	}
	_m.On("GetLayer", args...).Return(e.Returns.LayerInfo)
}

func (_m *MockCache) ApplyGetLayerExpectations(expectations []CacheGetLayerExpectation) {
	for _, e := range expectations {
		_m.ApplyGetLayerExpectation(e)
	}
}

// GetLayer provides a mock function with given fields: layerID
func (_m *MockCache) GetLayer(layerID string) types.LayerInfo {
	ret := _m.Called(layerID)

	var r0 types.LayerInfo
	if rf, ok := ret.Get(0).(func(string) types.LayerInfo); ok {
		r0 = rf(layerID)
	} else {
		r0 = ret.Get(0).(types.LayerInfo)
	}

	return r0
}

type CacheMissingLayersArgs struct {
	ImageID          string
	ImageIDAnything  bool
	LayerIDs         []string
	LayerIDsAnything bool
}

type CacheMissingLayersReturns struct {
	MissingImage    bool
	MissingLayerIDs []string
	Err             error
}

type CacheMissingLayersExpectation struct {
	Args    CacheMissingLayersArgs
	Returns CacheMissingLayersReturns
}

func (_m *MockCache) ApplyMissingLayersExpectation(e CacheMissingLayersExpectation) {
	var args []interface{}
	if e.Args.ImageIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ImageID)
	}
	if e.Args.LayerIDsAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.LayerIDs)
	}
	_m.On("MissingLayers", args...).Return(e.Returns.MissingImage, e.Returns.MissingLayerIDs, e.Returns.Err)
}

func (_m *MockCache) ApplyMissingLayersExpectations(expectations []CacheMissingLayersExpectation) {
	for _, e := range expectations {
		_m.ApplyMissingLayersExpectation(e)
	}
}

// MissingLayers provides a mock function with given fields: imageID, layerIDs
func (_m *MockCache) MissingLayers(imageID string, layerIDs []string) (bool, []string, error) {
	ret := _m.Called(imageID, layerIDs)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []string) bool); ok {
		r0 = rf(imageID, layerIDs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(string, []string) []string); ok {
		r1 = rf(imageID, layerIDs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, []string) error); ok {
		r2 = rf(imageID, layerIDs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type CachePutImageArgs struct {
	ImageID             string
	ImageIDAnything     bool
	ImageConfig         types.ImageInfo
	ImageConfigAnything bool
}

type CachePutImageReturns struct {
	Err error
}

type CachePutImageExpectation struct {
	Args    CachePutImageArgs
	Returns CachePutImageReturns
}

func (_m *MockCache) ApplyPutImageExpectation(e CachePutImageExpectation) {
	var args []interface{}
	if e.Args.ImageIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ImageID)
	}
	if e.Args.ImageConfigAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.ImageConfig)
	}
	_m.On("PutImage", args...).Return(e.Returns.Err)
}

func (_m *MockCache) ApplyPutImageExpectations(expectations []CachePutImageExpectation) {
	for _, e := range expectations {
		_m.ApplyPutImageExpectation(e)
	}
}

// PutImage provides a mock function with given fields: imageID, imageConfig
func (_m *MockCache) PutImage(imageID string, imageConfig types.ImageInfo) error {
	ret := _m.Called(imageID, imageConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.ImageInfo) error); ok {
		r0 = rf(imageID, imageConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type CachePutLayerArgs struct {
	LayerID                     string
	LayerIDAnything             bool
	DecompressedLayerID         string
	DecompressedLayerIDAnything bool
	LayerInfo                   types.LayerInfo
	LayerInfoAnything           bool
}

type CachePutLayerReturns struct {
	Err error
}

type CachePutLayerExpectation struct {
	Args    CachePutLayerArgs
	Returns CachePutLayerReturns
}

func (_m *MockCache) ApplyPutLayerExpectation(e CachePutLayerExpectation) {
	var args []interface{}
	if e.Args.LayerIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.LayerID)
	}
	if e.Args.DecompressedLayerIDAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.DecompressedLayerID)
	}
	if e.Args.LayerInfoAnything {
		args = append(args, mock.Anything)
	} else {
		args = append(args, e.Args.LayerInfo)
	}
	_m.On("PutLayer", args...).Return(e.Returns.Err)
}

func (_m *MockCache) ApplyPutLayerExpectations(expectations []CachePutLayerExpectation) {
	for _, e := range expectations {
		_m.ApplyPutLayerExpectation(e)
	}
}

// PutLayer provides a mock function with given fields: layerID, decompressedLayerID, layerInfo
func (_m *MockCache) PutLayer(layerID string, decompressedLayerID string, layerInfo types.LayerInfo) error {
	ret := _m.Called(layerID, decompressedLayerID, layerInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, types.LayerInfo) error); ok {
		r0 = rf(layerID, decompressedLayerID, layerInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
